# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from swagger_server.models.ip_address import IpAddress  # noqa: F401,E501
from swagger_server.models.pdu_session_type import PduSessionType  # noqa: F401,E501
import re  # noqa: F401,E501
from server import util


class EstablishedSession(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, sst: int=None, sd: str=None, dnn: str=None, pdu_session_types: PduSessionType=None, address: IpAddress=None):  # noqa: E501
        """EstablishedSession - a model defined in Swagger

        :param id: The id of this EstablishedSession.  # noqa: E501
        :type id: int
        :param sst: The sst of this EstablishedSession.  # noqa: E501
        :type sst: int
        :param sd: The sd of this EstablishedSession.  # noqa: E501
        :type sd: str
        :param dnn: The dnn of this EstablishedSession.  # noqa: E501
        :type dnn: str
        :param pdu_session_types: The pdu_session_types of this EstablishedSession.  # noqa: E501
        :type pdu_session_types: PduSessionType
        :param address: The address of this EstablishedSession.  # noqa: E501
        :type address: IpAddress
        """
        self.swagger_types = {
            'id': int,
            'sst': int,
            'sd': str,
            'dnn': str,
            'pdu_session_types': PduSessionType,
            'address': IpAddress
        }

        self.attribute_map = {
            'id': 'id',
            'sst': 'sst',
            'sd': 'sd',
            'dnn': 'dnn',
            'pdu_session_types': 'pduSessionTypes',
            'address': 'address'
        }
        self._id = id
        self._sst = sst
        self._sd = sd
        self._dnn = dnn
        self._pdu_session_types = pdu_session_types
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'EstablishedSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EstablishedSession of this EstablishedSession.  # noqa: E501
        :rtype: EstablishedSession
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this EstablishedSession.


        :return: The id of this EstablishedSession.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this EstablishedSession.


        :param id: The id of this EstablishedSession.
        :type id: int
        """

        self._id = id

    @property
    def sst(self) -> int:
        """Gets the sst of this EstablishedSession.


        :return: The sst of this EstablishedSession.
        :rtype: int
        """
        return self._sst

    @sst.setter
    def sst(self, sst: int):
        """Sets the sst of this EstablishedSession.


        :param sst: The sst of this EstablishedSession.
        :type sst: int
        """
        if sst is None:
            raise ValueError("Invalid value for `sst`, must not be `None`")  # noqa: E501

        self._sst = sst

    @property
    def sd(self) -> str:
        """Gets the sd of this EstablishedSession.


        :return: The sd of this EstablishedSession.
        :rtype: str
        """
        return self._sd

    @sd.setter
    def sd(self, sd: str):
        """Sets the sd of this EstablishedSession.


        :param sd: The sd of this EstablishedSession.
        :type sd: str
        """
        if sd is None:
            raise ValueError("Invalid value for `sd`, must not be `None`")  # noqa: E501

        self._sd = sd

    @property
    def dnn(self) -> str:
        """Gets the dnn of this EstablishedSession.


        :return: The dnn of this EstablishedSession.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn: str):
        """Sets the dnn of this EstablishedSession.


        :param dnn: The dnn of this EstablishedSession.
        :type dnn: str
        """
        if dnn is None:
            raise ValueError("Invalid value for `dnn`, must not be `None`")  # noqa: E501

        self._dnn = dnn

    @property
    def pdu_session_types(self) -> PduSessionType:
        """Gets the pdu_session_types of this EstablishedSession.


        :return: The pdu_session_types of this EstablishedSession.
        :rtype: PduSessionType
        """
        return self._pdu_session_types

    @pdu_session_types.setter
    def pdu_session_types(self, pdu_session_types: PduSessionType):
        """Sets the pdu_session_types of this EstablishedSession.


        :param pdu_session_types: The pdu_session_types of this EstablishedSession.
        :type pdu_session_types: PduSessionType
        """

        self._pdu_session_types = pdu_session_types

    @property
    def address(self) -> IpAddress:
        """Gets the address of this EstablishedSession.


        :return: The address of this EstablishedSession.
        :rtype: IpAddress
        """
        return self._address

    @address.setter
    def address(self, address: IpAddress):
        """Sets the address of this EstablishedSession.


        :param address: The address of this EstablishedSession.
        :type address: IpAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address
