# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server.models.pdu_session_type import PduSessionType  # noqa: F401,E501
from server.models.ipv4_addr import Ipv4Addr  # noqa: F401,E501
import re  # noqa: F401,E501
from server import util


class SelectedSession(Model):
  """NOTE: This class is auto generated by the swagger code generator program.

  Do not edit the class manually.
  """

  def __init__(self, sst: int = None, sd: str = None, dnn: str = None, pdu_session_type: PduSessionType = None,
               end_point_ip: Ipv4Addr = None, end_point_port: int = None):  # noqa: E501
    """SelectedSession - a model defined in Swagger

    :param sst: The sst of this SelectedSession.  # noqa: E501
    :type sst: int
    :param sd: The sd of this SelectedSession.  # noqa: E501
    :type sd: str
    :param dnn: The dnn of this SelectedSession.  # noqa: E501
    :type dnn: str
    :param pdu_session_type: The pdu_session_type of this SelectedSession.  # noqa: E501
    :type pdu_session_type: PduSessionType
    :param end_point_ip: The end_point_ip of this SelectedSession.  # noqa: E501
    :type end_point_ip: Ipv4Addr
    :param end_point_port: The end_point_port of this SelectedSession.  # noqa: E501
    :type end_point_port: int
    """
    self.swagger_types = {
      'sst': int,
      'sd': str,
      'dnn': str,
      'pdu_session_type': PduSessionType,
      'end_point_ip': Ipv4Addr,
      'end_point_port': int
    }

    self.attribute_map = {
      'sst': 'sst',
      'sd': 'sd',
      'dnn': 'dnn',
      'pdu_session_type': 'pduSessionType',
      'end_point_ip': 'endPointIp',
      'end_point_port': 'endPointPort'
    }
    self._sst = sst
    self._sd = sd
    self._dnn = dnn
    self._pdu_session_type = pdu_session_type
    self._end_point_ip = end_point_ip
    self._end_point_port = end_point_port

  @classmethod
  def from_dict(cls, dikt) -> 'SelectedSession':
    """Returns the dict as a model

    :param dikt: A dict.
    :type: dict
    :return: The SelectedSession of this SelectedSession.  # noqa: E501
    :rtype: SelectedSession
    """
    return util.deserialize_model(dikt, cls)

  @property
  def sst(self) -> int:
    """Gets the sst of this SelectedSession.


    :return: The sst of this SelectedSession.
    :rtype: int
    """
    return self._sst

  @sst.setter
  def sst(self, sst: int):
    """Sets the sst of this SelectedSession.


    :param sst: The sst of this SelectedSession.
    :type sst: int
    """
    if sst is None:
      raise ValueError("Invalid value for `sst`, must not be `None`")  # noqa: E501

    self._sst = sst

  @property
  def sd(self) -> str:
    """Gets the sd of this SelectedSession.


    :return: The sd of this SelectedSession.
    :rtype: str
    """
    return self._sd

  @sd.setter
  def sd(self, sd: str):
    """Sets the sd of this SelectedSession.


    :param sd: The sd of this SelectedSession.
    :type sd: str
    """

    self._sd = sd

  @property
  def dnn(self) -> str:
    """Gets the dnn of this SelectedSession.


    :return: The dnn of this SelectedSession.
    :rtype: str
    """
    return self._dnn

  @dnn.setter
  def dnn(self, dnn: str):
    """Sets the dnn of this SelectedSession.


    :param dnn: The dnn of this SelectedSession.
    :type dnn: str
    """

    self._dnn = dnn

  @property
  def pdu_session_type(self) -> PduSessionType:
    """Gets the pdu_session_type of this SelectedSession.


    :return: The pdu_session_type of this SelectedSession.
    :rtype: PduSessionType
    """
    return self._pdu_session_type

  @pdu_session_type.setter
  def pdu_session_type(self, pdu_session_type: PduSessionType):
    """Sets the pdu_session_type of this SelectedSession.


    :param pdu_session_type: The pdu_session_type of this SelectedSession.
    :type pdu_session_type: PduSessionType
    """

    self._pdu_session_type = pdu_session_type

  @property
  def end_point_ip(self) -> Ipv4Addr:
    """Gets the end_point_ip of this SelectedSession.


    :return: The end_point_ip of this SelectedSession.
    :rtype: Ipv4Addr
    """
    return self._end_point_ip

  @end_point_ip.setter
  def end_point_ip(self, end_point_ip: Ipv4Addr):
    """Sets the end_point_ip of this SelectedSession.


    :param end_point_ip: The end_point_ip of this SelectedSession.
    :type end_point_ip: Ipv4Addr
    """

    self._end_point_ip = end_point_ip

  @property
  def end_point_port(self) -> int:
    """Gets the end_point_port of this SelectedSession.


    :return: The end_point_port of this SelectedSession.
    :rtype: int
    """
    return self._end_point_port

  @end_point_port.setter
  def end_point_port(self, end_point_port: int):
    """Sets the end_point_port of this SelectedSession.


    :param end_point_port: The end_point_port of this SelectedSession.
    :type end_point_port: int
    """

    self._end_point_port = end_point_port
