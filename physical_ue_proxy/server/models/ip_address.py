# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server.models.ipv4_addr import Ipv4Addr  # noqa: F401,E501
from server.models.ipv6_addr import Ipv6Addr  # noqa: F401,E501
from server.models.ipv6_prefix import Ipv6Prefix  # noqa: F401,E501
import re  # noqa: F401,E501
from server import util


class IpAddress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ipv4_addr: Ipv4Addr=None, ipv6_addr: Ipv6Addr=None, ipv6_prefix: Ipv6Prefix=None):  # noqa: E501
        """IpAddress - a model defined in Swagger

        :param ipv4_addr: The ipv4_addr of this IpAddress.  # noqa: E501
        :type ipv4_addr: Ipv4Addr
        :param ipv6_addr: The ipv6_addr of this IpAddress.  # noqa: E501
        :type ipv6_addr: Ipv6Addr
        :param ipv6_prefix: The ipv6_prefix of this IpAddress.  # noqa: E501
        :type ipv6_prefix: Ipv6Prefix
        """
        self.swagger_types = {
            'ipv4_addr': Ipv4Addr,
            'ipv6_addr': Ipv6Addr,
            'ipv6_prefix': Ipv6Prefix
        }

        self.attribute_map = {
            'ipv4_addr': 'ipv4Addr',
            'ipv6_addr': 'ipv6Addr',
            'ipv6_prefix': 'ipv6Prefix'
        }
        self._ipv4_addr = ipv4_addr
        self._ipv6_addr = ipv6_addr
        self._ipv6_prefix = ipv6_prefix

    @classmethod
    def from_dict(cls, dikt) -> 'IpAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IpAddress of this IpAddress.  # noqa: E501
        :rtype: IpAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipv4_addr(self) -> Ipv4Addr:
        """Gets the ipv4_addr of this IpAddress.


        :return: The ipv4_addr of this IpAddress.
        :rtype: Ipv4Addr
        """
        return self._ipv4_addr

    @ipv4_addr.setter
    def ipv4_addr(self, ipv4_addr: Ipv4Addr):
        """Sets the ipv4_addr of this IpAddress.


        :param ipv4_addr: The ipv4_addr of this IpAddress.
        :type ipv4_addr: Ipv4Addr
        """

        self._ipv4_addr = ipv4_addr

    @property
    def ipv6_addr(self) -> Ipv6Addr:
        """Gets the ipv6_addr of this IpAddress.


        :return: The ipv6_addr of this IpAddress.
        :rtype: Ipv6Addr
        """
        return self._ipv6_addr

    @ipv6_addr.setter
    def ipv6_addr(self, ipv6_addr: Ipv6Addr):
        """Sets the ipv6_addr of this IpAddress.


        :param ipv6_addr: The ipv6_addr of this IpAddress.
        :type ipv6_addr: Ipv6Addr
        """

        self._ipv6_addr = ipv6_addr

    @property
    def ipv6_prefix(self) -> Ipv6Prefix:
        """Gets the ipv6_prefix of this IpAddress.


        :return: The ipv6_prefix of this IpAddress.
        :rtype: Ipv6Prefix
        """
        return self._ipv6_prefix

    @ipv6_prefix.setter
    def ipv6_prefix(self, ipv6_prefix: Ipv6Prefix):
        """Sets the ipv6_prefix of this IpAddress.


        :param ipv6_prefix: The ipv6_prefix of this IpAddress.
        :type ipv6_prefix: Ipv6Prefix
        """

        self._ipv6_prefix = ipv6_prefix
